--- a/libweston/weston-launch.c	2018-04-10 01:21:34.000000000 +0800
+++ b/libweston/weston-launch.c	2018-04-26 17:55:02.655642547 +0800
@@ -52,7 +52,11 @@
 
 #include <pwd.h>
 #include <grp.h>
+#define ENABLED_PAM	0
+#define ENABLED_KB	0
+#if ENABLED_PAM
 #include <security/pam_appl.h>
+#endif
 
 #ifdef HAVE_SYSTEMD_LOGIN
 #include <systemd/sd-login.h>
@@ -101,8 +105,10 @@
 #endif
 
 struct weston_launch {
+#if ENABLED_PAM
 	struct pam_conv pc;
 	pam_handle_t *ph;
+#endif
 	int tty;
 	int ttynr;
 	int sock[2];
@@ -156,8 +162,12 @@
 	int err;
 #endif
 
+#if ENABLED_PAM
 	if (getuid() == 0)
 		return true;
+#else
+	return true;
+#endif
 
 	gr = getgrnam("weston-launch");
 	if (gr) {
@@ -189,6 +199,7 @@
 	return false;
 }
 
+#if ENABLED_PAM
 static int
 pam_conversation_fn(int msg_count,
 		    const struct pam_message **messages,
@@ -229,6 +240,7 @@
 
 	return 0;
 }
+#endif
 
 static int
 setup_launcher_socket(struct weston_launch *wl)
@@ -422,6 +434,7 @@
 	close(wl->signalfd);
 	close(wl->sock[0]);
 
+#if ENABLED_PAM
 	if (wl->new_user) {
 		err = pam_close_session(wl->ph, 0);
 		if (err)
@@ -429,14 +442,26 @@
 				err, pam_strerror(wl->ph, err));
 		pam_end(wl->ph, err);
 	}
+#endif
 
+#if ENABLED_KB
 	if (ioctl(wl->tty, KDSKBMUTE, 0) &&
 	    ioctl(wl->tty, KDSKBMODE, wl->kb_mode))
 		fprintf(stderr, "failed to restore keyboard mode: %m\n");
 
 	if (ioctl(wl->tty, KDSETMODE, KD_TEXT))
 		fprintf(stderr, "failed to set KD_TEXT mode on tty: %m\n");
+#else
 
+	fprintf(stderr, "tty %s\n", wl->tty);
+	err = ioctl(wl->tty, KDSKBMODE, wl->kb_mode);
+	if(err)
+		fprintf(stderr, "2.failed to set keyboard mode: %d, %s\n", err, strerror(errno));
+	
+	err = ioctl(wl->tty, KDSETMODE, KD_TEXT);
+	if(err)
+		fprintf(stderr, "2.failed to set TEXT mode: %d, %s\n", err, strerror(errno));
+#endif
 	/* We have to drop master before we switch the VT back in
 	 * VT_AUTO, so we don't risk switching to a VT with another
 	 * display server, that will then fail to set drm master. */
@@ -525,8 +550,10 @@
 	struct stat buf;
 	struct vt_mode mode = { 0 };
 	char *t;
+	int err = -1;
 
 	if (!wl->new_user) {
+#if ENABLED_PAM
 		wl->tty = STDIN_FILENO;
 	} else if (tty) {
 		t = ttyname(STDIN_FILENO);
@@ -535,6 +562,7 @@
 		else
 			wl->tty = open(tty, O_RDWR | O_NOCTTY);
 	} else {
+#endif
 		int tty0 = open("/dev/tty0", O_WRONLY | O_CLOEXEC);
 		char filename[16];
 
@@ -566,6 +594,7 @@
 		wl->ttynr = minor(buf.st_rdev);
 	}
 
+#if ENABLED_KB
 	if (ioctl(wl->tty, KDGKBMODE, &wl->kb_mode))
 		error(1, errno, "failed to get current keyboard mode: %m\n");
 
@@ -575,7 +604,21 @@
 
 	if (ioctl(wl->tty, KDSETMODE, KD_GRAPHICS))
 		error(1, errno, "failed to set KD_GRAPHICS mode on tty: %m\n");
+#else
+	err = ioctl(wl->tty, KDGKBMODE, &wl->kb_mode);
+	if(err)
+		fprintf(stderr, "3.failed to get  keyboard mode: %d, %s\n", err, strerror(errno));
 
+
+	err = ioctl(wl->tty, KDSKBMODE, K_OFF);
+	if(err)
+		fprintf(stderr, "3.failed to set keyboard mode: %d, %s\n", err, strerror(errno));
+
+	err = ioctl(wl->tty, KDSETMODE, KD_GRAPHICS);
+	if(err)
+		fprintf(stderr, "3.failed to set Graphic mode: %d, %s\n", err, strerror(errno));
+
+#endif
 	mode.mode = VT_PROCESS;
 	mode.relsig = SIGUSR1;
 	mode.acqsig = SIGUSR2;
@@ -608,6 +651,7 @@
 	setenv("HOME", wl->pw->pw_dir, 1);
 	setenv("SHELL", wl->pw->pw_shell, 1);
 
+#if ENABLED_PAM
 	env = pam_getenvlist(wl->ph);
 	if (env) {
 		for (i = 0; env[i]; ++i) {
@@ -616,6 +660,7 @@
 		}
 		free(env);
 	}
+#endif
 
 	/*
 	 * We open a new session, so it makes sense
@@ -624,7 +669,7 @@
 	child_argv[0] = "/bin/sh";
 	child_argv[1] = "-l";
 	child_argv[2] = "-c";
-	child_argv[3] = BINDIR "/weston \"$@\"";
+	child_argv[3] = "/bin/weston \"$@\"";
 	child_argv[4] = "weston";
 	return 5;
 }
@@ -652,15 +697,15 @@
 	if (wl->new_user) {
 		o = setup_session(wl, child_argv);
 	} else {
-		child_argv[0] = BINDIR "/weston";
+		child_argv[0] = "/bin/weston";
 		o = 1;
 	}
 	for (i = 0; i < argc; ++i)
 		child_argv[o + i] = argv[i];
 	child_argv[o + i] = NULL;
 
-	if (geteuid() == 0)
-		drop_privileges(wl);
+	//if (geteuid() == 0)
+	//	drop_privileges(wl);
 
 	setenv_fd("WESTON_TTY_FD", wl->tty);
 	setenv_fd("WESTON_LAUNCHER_SOCK", wl->sock[1]);
@@ -675,7 +720,9 @@
 	sigprocmask(SIG_UNBLOCK, &mask, NULL);
 
 
-	execv(child_argv[0], child_argv);
+	int err = execv(child_argv[0], child_argv);
+	if(err <0)
+		printf("ERROR :%s\n", strerror(errno));
 	error(1, errno, "exec failed");
 }
 
@@ -683,8 +730,10 @@
 help(const char *name)
 {
 	fprintf(stderr, "Usage: %s [args...] [-- [weston args..]]\n", name);
+#if ENABLED_PAM
 	fprintf(stderr, "  -u, --user      Start session as specified username,\n"
 			"                  e.g. -u joe, requires root.\n");
+#endif
 	fprintf(stderr, "  -t, --tty       Start session on alternative tty,\n"
 			"                  e.g. -t /dev/tty4, requires -u option.\n");
 	fprintf(stderr, "  -v, --verbose   Be verbose\n");
@@ -698,7 +747,9 @@
 	int i, c;
 	char *tty = NULL;
 	struct option opts[] = {
+#if ENABLED_PAM
 		{ "user",    required_argument, NULL, 'u' },
+#endif
 		{ "tty",     required_argument, NULL, 't' },
 		{ "verbose", no_argument,       NULL, 'v' },
 		{ "help",    no_argument,       NULL, 'h' },
@@ -709,11 +760,13 @@
 
 	while ((c = getopt_long(argc, argv, "u:t:vh", opts, &i)) != -1) {
 		switch (c) {
+#if ENABLED_PAM
 		case 'u':
 			wl.new_user = optarg;
 			if (getuid() != 0)
 				error(1, 0, "Permission denied. -u allowed for root only");
 			break;
+#endif
 		case 't':
 			tty = optarg;
 			break;
@@ -731,6 +784,7 @@
 	if ((argc - optind) > (MAX_ARGV_SIZE - 6))
 		error(1, E2BIG, "Too many arguments to pass to weston");
 
+#if ENABLED_PAM
 	if (tty && !wl.new_user)
 		error(1, 0, "-t/--tty option requires -u/--user option as well");
 
@@ -740,6 +794,7 @@
 		wl.pw = getpwuid(getuid());
 	if (wl.pw == NULL)
 		error(1, errno, "failed to get username");
+#endif
 
 	if (!weston_launch_allowed(&wl))
 		error(1, 0, "Permission denied. You should either:\n"
@@ -753,8 +808,10 @@
 	if (setup_tty(&wl, tty) < 0)
 		exit(EXIT_FAILURE);
 
+#if ENABLED_PAM
 	if (wl.new_user && setup_pam(&wl) < 0)
 		exit(EXIT_FAILURE);
+#endif
 
 	if (setup_launcher_socket(&wl) < 0)
 		exit(EXIT_FAILURE);
